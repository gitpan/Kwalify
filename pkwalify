#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: pkwalify,v 1.5 2006/11/26 10:43:15 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2006 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use vars qw($VERSION);
$VERSION = sprintf("%d.%02d", q$Revision: 1.5 $ =~ /(\d+)\.(\d+)/);

use Kwalify;
use Getopt::Long;

my $schema_file;
GetOptions("f=s" => \$schema_file)
    or usage();

if (!defined $schema_file) {
    usage("-f option is mandatory");
}

my $data_file = shift @ARGV;
if (!defined $data_file) {
    usage("datafile is mandatory");
}

my(@schema) = read_file($schema_file);
if (@schema != 1) {
    die "<$schema_file> does not contain exactly one schema, cannot handle this";
}
my $schema = $schema[0];
my(@data)   = read_file($data_file);

my $errors = 0;
for my $data (@data) {
    eval { Kwalify::validate($schema, $data) };
    if ($@) {
	warn "$@\n";
	$errors++;
    }
}

exit $errors;

sub read_file {
    my $file = shift;
    my @data;
    my @errors;
    if (eval { require YAML::Syck; 1 }) {
	@data = eval { YAML::Syck::LoadFile($file) };
	return @data if !$@;
	push @errors, $@;
    }
    if (eval { require YAML; 1 }) {
	@data = eval { YAML::LoadFile($file) };
	return @data if !$@;
	push @errors, $@;
    }
    if (eval { require JSON; 1 }) {
	my $data = eval {
	    open JSON, "< $file"
		or die "Can't open <$file>: $!";
	    local $/ = undef;
	    my $json = <JSON>;
	    close JSON;
	    JSON::jsonToObj($json);
	};
	return ($data) if $data && !$@;
	push @errors, $@;
    }
    die "Cannot parse <$file>. Cumulated errors:\n" . join("\n", @errors) . "\n";
}

sub usage {
    my($msg) = @_;
    $msg .= "\n" if defined $msg;
    die <<EOF;
${msg}usage: $0 -f schema.yml data.yml
       $0 -f schema.json data.json
EOF
}

__END__

=encoding iso-8859-2

=head1 NAME

pkwalify - Kwalify schema for data structures

=head1 SYNOPSIS

    pkwalify -f schemafile datafile

=head1 DESCRIPTION

B<pkwalify> validates the data from I<datafile> (which may be a
L<YAML> or L<JSON> file) against a schema defined with I<schemafile>
(which also may be a YAML or JSON file).

The program returns the number of errors found in the datafile. An
exit status 0 means no errors.

=head1 AUTHOR

Slaven Reziæ, E<lt>srezic@cpan.orgE<gt>

=head1 SEE ALSO

L<Kwalify>, L<kwalify(1)>, L<JSON>, L<YAML>.

=cut

